from aiogram.types import CallbackQuery, Message
from aiogram import Router,F
from aiogram.fsm.context import FSMContext
from app.services.fetch_post import fetch_post_id
from app.states.post_states import GetPostState
from app.repositories.post import PostRepository
from app.database.session import SessionLocal
from app.utils.is_number import is_number
from app.utils.keyboard_helpers import build_menu_2_buttons, build_menu_back_button
from app.utils.show_text import show_text
from app.utils.post_helpers import normalize_and_save_posts

router = Router()


@router.callback_query(F.data == "get_post_by_id")
async def ask_post_id(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GetPostState.waiting_for_post_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")



@router.message(GetPostState.waiting_for_post_id)
async def process_post_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üî¢ –ü–æ—Å—Ç –ø–æ –Ω–æ–º–µ—Ä—É".

    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID –ø–æ—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –≤—ã–≤–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —á–∏—Å–ª–∞.
    :param callback: –û–±—ä–µ–∫—Ç CallbackQuery –æ—Ç Telegram.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not await is_number(message):
        return

    post_id = int(message.text)

    async with SessionLocal() as session:
        rep = PostRepository(session)
        post_bd = await rep.get_post_by_id(post_id)
        if len(post_bd) > 0:
            text = show_text(post_bd)

        else:
            post = await fetch_post_id(post_id)

            if not post:
                button = build_menu_back_button()
                await message.answer(f"‚ùó–ü–æ—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ë–î, –Ω–∏ –≤ API.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ.\n", reply_markup=button)
                await state.set_state(GetPostState.waiting_for_post_id)
                return
            
            result = await normalize_and_save_posts([post], session, message)    
            text = result["all"]
        buttons = build_menu_2_buttons(text="üî¢  –î—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä", callback_data="get_post_by_id")
        await message.answer(text,reply_markup=buttons)
        await state.clear() 




