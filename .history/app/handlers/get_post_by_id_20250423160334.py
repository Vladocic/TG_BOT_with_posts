from aiogram.types import CallbackQuery, Message
from aiogram import Router,F
from aiogram.fsm.context import FSMContext
from app.services.post_service import get_post_by_id_text
from app.states.post_states import GetPostState
from app.database.session import SessionLocal
from app.utils import build_menu_2_buttons, build_menu_back_button, is_number

router = Router()


@router.callback_query(F.data == "get_post_by_id")
async def ask_post_id(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üî¢ –ü–æ—Å—Ç –ø–æ –Ω–æ–º–µ—Ä—É".
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID –ø–æ—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –≤—ã–≤–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —á–∏—Å–ª–∞.
    :param callback: –û–±—ä–µ–∫—Ç CallbackQuery –æ—Ç Telegram.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.set_state(GetPostState.waiting_for_post_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")



@router.message(GetPostState.waiting_for_post_id)
async def process_post_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID –ø–æ—Å—Ç–∞.
    """
    if not await is_number(message):
        return

    post_id = int(message.text)

    async with SessionLocal() as session:
        text, found = await get_post_by_id_text(post_id, session, message)

        if not found:
            button = build_menu_back_button()
            await message.answer(f"‚ùó–ü–æ—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ë–î, –Ω–∏ –≤ API.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ.\n", reply_markup=button)
            await state.set_state(GetPostState.waiting_for_post_id)
            return

        buttons = build_menu_2_buttons("üî¢ –î—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä", "get_post_by_id")
        await message.answer(text, reply_markup=buttons)
        await state.clear()


