from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from app.repositories.post import PostRepository
from app.utils.post_helpers import normalize_and_save_posts
from app.utils.show_text import show_text
from app.services.fetch_post import fetch_random_post
from app.services.fetch_post import fetch_post_id
from aiogram.types import TelegramObject

import random

def build_main_menu() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏.
    :return: InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìö –í—Å–µ –ø–æ—Å—Ç—ã", callback_data="get_all_posts")],
            [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç", callback_data="get_random_post")],
            [InlineKeyboardButton(text="üî¢ –ü–æ—Å—Ç –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="get_post_by_id")],
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å üìù", callback_data="create_post"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å ‚ùå", callback_data="delete_post_by_id")
            ],
            [InlineKeyboardButton(text="üí£ –£–¥–∞–ª–∏—Ç—å –≤—Å—ë (–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ)", callback_data="delete_all")]
        ]
    )


async def get_paginated_posts_text(session, offset: int = 0) -> tuple[str, bool]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç + —Ñ–ª–∞–≥, –µ—Å—Ç—å –ª–∏ –µ—â—ë –ø–æ—Å—Ç—ã.
    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param offset: –°–º–µ—â–µ–Ω–∏–µ.
    :return: (text, has_more)
    """
    repo = PostRepository(session)
    posts = await repo.get_posts_paginated(offset=offset)
    text = show_text(posts)
    has_more = len(posts) == 5
    return text, has_more


async def get_random_post_text(session, sender) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ –ë–î, –µ—Å–ª–∏ –≤ –Ω–µ–π –±–æ–ª—å—à–µ 5 –∑–∞–ø–∏—Å–µ–π.
    –ò–Ω–∞—á–µ ‚Äî –ø–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ API, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç.
    :param session: –°–µ—Å—Å–∏—è SQLAlchemy.
    :param sender: –û–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ (CallbackQuery –∏–ª–∏ Message).
    :return: –ì–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞.
    """
    repo = PostRepository(session)
    ids = await repo.get_all_posts_id()

    if len(ids) > 5:
        random_id = random.choice(ids)
        post = await repo.get_post_by_id(random_id)
        return show_text(post)
    else:
        api_post = await fetch_random_post()
        result = await normalize_and_save_posts([api_post], session, sender)
        return result["all"]
    

async def get_post_by_id_text(post_id: int, session, sender: TelegramObject) -> tuple[str, bool]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç –ø–æ ID: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –ë–î, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏–∑ API. 
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏.

    :param post_id: ID –ø–æ—Å—Ç–∞
    :param session: –°–µ—Å—Å–∏—è SQLAlchemy
    :param sender: Telegram –æ–±—ä–µ–∫—Ç (Message –∏–ª–∏ Callback)
    :return: (—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–æ—Å—Ç)
    """
    repo = PostRepository(session)
    post_bd = await repo.get_post_by_id(post_id)

    if post_bd:
        return show_text(post_bd), True

    post = await fetch_post_id(post_id)
    if not post:
        return "", False

    result = await normalize_and_save_posts([post], session, sender)
    return result["all"], True